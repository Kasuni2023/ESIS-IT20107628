import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.smart.shoe.R;
import com.smart.shoe.entity.User;
import com.smart.shoe.Firebase;

import java.util.HashMap;
import java.util.Locale;

public class RegisterActivity extends AppCompatActivity {
    // Constants for array indices
    private static final int INDEX_HINT = 1;
    private static final int INDEX_EDITABLE = 4;
    private static final int INDEX_INPUT_TYPE = 2;
    private static final int INDEX_VALUE = 3;
    private static final int INDEX_FIELD_NAME = 0;

    // Boolean flag for player or coach registration
    public static boolean player = true;

    // Variables for input fields
    Object[][] inputs = null;

    Object[][] player_input = {
            {"id", "Player ID (Auto gen):", InputType.TYPE_CLASS_TEXT, generate_random_uid(), false},
            {"name", "Name:", InputType.TYPE_CLASS_TEXT, "", true},
            {"weight", "Weight (kg):", InputType.TYPE_NUMBER_FLAG_DECIMAL, "", true},
            {"height", "Height (cm):", InputType.TYPE_NUMBER_FLAG_DECIMAL, "", true},
            {"birthday", "Birthday:", InputType.TYPE_DATETIME_VARIATION_DATE, "", false},
            {"gender", "Gender:", InputType.TYPE_CLASS_TEXT, "", true},
            {"shoe", "Shoe size:", InputType.TYPE_NUMBER_FLAG_DECIMAL, "", true},
            {"email", "Email:", InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS, "", true},
            {"phone", "Contact number:", InputType.TYPE_CLASS_PHONE, "", true},
            {"password", "Password:", InputType.TYPE_TEXT_VARIATION_PASSWORD, "", true},
            {"password", "Confirm Password:", InputType.TYPE_TEXT_VARIATION_PASSWORD, "", true},
    };
    Object[][] coach_input = {
            {"id", "Coach ID (Auto gen):", InputType.TYPE_CLASS_TEXT, generate_random_uid(), false},
            {"name", "Name:", InputType.TYPE_CLASS_TEXT, "", true},
            {"email", "Email:", InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS, "", true},
            {"phone", "Contact number:", InputType.TYPE_CLASS_PHONE, "", true},
            {"password", "Password:", InputType.TYPE_TEXT_VARIATION_PASSWORD, "", true},
            {"password", "Confirm Password:", InputType.TYPE_TEXT_VARIATION_PASSWORD, "", true},
    };


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);

        ImageView back = findViewById(R.id.ar_back);

        Button register = findViewById(R.id.ar_register);
        inputs = player ? player_input : coach_input;
        ((TextView) findViewById(R.id.ar_type)).setText(player ? "Player Info" : "Coach Info");

        for (int i = 0; i < inputs.length; i++) {
            add_input_field(i);
        }


        back.setOnClickListener(view -> finish());

        register.setOnClickListener(view -> {

            ProgressDialog dialog = ProgressDialog.show(RegisterActivity.this,
                    "Please wait!", "Creating your account!");

            User user;
            try{
                user = new User("", inputs[7][INDEX_VALUE].toString(), inputs[9][INDEX_VALUE].toString());
            }catch (Exception e){
                user = new User("", inputs[2][INDEX_VALUE].toString(), inputs[4][INDEX_VALUE].toString());
            }

            user.details = new HashMap<>();
            for (Object[] input : inputs) {
                if (input[INDEX_VALUE] == null || input[INDEX_VALUE].toString().length() == 0) {
                    dialog.dismiss();
                    Toast.makeText(this, "Please fill " + input[INDEX_HINT], Toast.LENGTH_SHORT).show();
                    return;
                }
                user.details.put(input[INDEX_FIELD_NAME].toString(), input[INDEX_VALUE].toString());
            }
            user.type = player ? "Player" : "Coach";

            new Firebase.signup(user, RegisterActivity.this) {
                @Override
                public void failure(String message) {
                    dialog.dismiss();
                    Toast.makeText(RegisterActivity.this, message, Toast.LENGTH_SHORT).show();

                }

                @Override
                public void success() {
                    dialog.dismiss();
                    startActivity(new Intent(RegisterActivity.this, HomeActivity.class));
                }
            };


        });
    }

    private void add_input_field(int index){
        Object[] data = inputs[index];

        int type = (Integer) data[INDEX_INPUT_TYPE];
        boolean editable = (boolean) data[INDEX_EDITABLE];

        View view = LayoutInflater.from(this).inflate(R.layout.item_text_input, null, false);

        TextInputLayout layout = view.findViewById(R.id.iti_container);
        TextInputEditText input = layout.findViewById(R.id.iti_text);


        layout.setHint(String.valueOf(data[INDEX_HINT]));
        input.setInputType(type);
        input.setEnabled(editable);

        if (type == InputType.TYPE_DATETIME_VARIATION_DATE){
            ImageButton date = view.findViewById(R.id.iti_date);
            date.setVisibility(View.VISIBLE);

            date.setOnClickListener(v -> {
                DatePickerDialog dialog = new DatePickerDialog(RegisterActivity.this);
                dialog.setOnDateSetListener((view1, year, month, dayOfMonth) -> {
                    String date1 = String.format(Locale.ENGLISH, "%04d-%02d-%02d", year, month + 1, dayOfMonth);
                    input.setText(date1);
                });
                dialog.show();
            });
        }

        input.setText(data[INDEX_VALUE].toString());
        input.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                String value = s.toString();
                data[INDEX_VALUE] = value;
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });


        LinearLayout linearLayout = findViewById(R.id.ar_input_container);
        linearLayout.addView(view);
    }

    private int dpToPx(int dp) {
        float density = getResources().getDisplayMetrics().density;
        return Math.round(dp * density);
    }

    private static String generate_random_uid(){
        int count = 6;

        StringBuilder code = new StringBuilder();
        String letters = "QWERTYUIOPASDFGHJKLZXCVBNM";
        for (int i = 0; i < count; i++) {
            int index = (int) (Math.random() * letters.length());
            code.append(letters.charAt(index));
        }

        return code.toString();
    }

}
